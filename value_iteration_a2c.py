import numpy as np
import torch
from torch import nn
import random
import time


class Actor(nn.Module):
    def __init__(self, state_dim, n_action):
        super().__init__()
        random.seed(time.time())
        self.model = nn.Sequential(
            nn.Linear(state_dim, 8),
            nn.Linear(8, 16),
            nn.ReLU(),
            nn.Linear(16, n_action),
            nn.ReLU()
        )

        def init_weights(m):
            if isinstance(m, nn.Linear):
                torch.nn.init.xavier_uniform(m.weight)
                m.bias.data.fill_(0.01)

        self.model.apply(init_weights)

    def forward(self, x):
        return self.model(torch.from_numpy(x).float())


class Critic(nn.Module):
    def __init__(self, state_dim):
        super().__init__()
        random.seed(time.time())
        self.model = nn.Sequential(
            nn.Linear(state_dim, 64),
            nn.Linear(64, 16),
            nn.ReLU(),
            nn.Linear(16, 1),
            nn.ReLU()
        )

        def init_weights(m):
            if isinstance(m, nn.Linear):
                torch.nn.init.xavier_uniform(m.weight)
                m.bias.data.fill_(0.01)

        self.model.apply(init_weights)

    def forward(self, x):
        return self.model(torch.from_numpy(x).float())


def value_iteration_a2c(rho, u_max, n_action):
    iteration = 36
    n_cell = rho.shape[0]
    delta_u = u_max / n_action
    u_action = np.arange(0, u_max + delta_u, delta_u)
    T_terminal = int(rho.shape[1] / rho.shape[0])
    delta_T = 1 / n_cell
    T = int(T_terminal / delta_T)

    PG = dict()
    actor = Actor(2, n_action + 1)
    actor_optimizer = torch.optim.Adam(actor.parameters(), lr=1e-3)

    V = dict()
    critic = Critic(2)
    critic_optimizer = torch.optim.Adam(critic.parameters(), lr=1e-3)

    u_new = np.zeros((n_cell, T))
    V_new = np.zeros((n_cell + 1, T + 1), dtype=np.float64)

    for v_it in range(iteration):
        bootstrap = int(iteration * 3 / 4) + 1
        for i in range(n_cell * n_action):
            for t in range(T):
                min_value = np.float('inf')
                pg_action = list()
                for j in np.arange(n_action + 1):
                    speed = u_action[j]
                    new_i = int(i + speed / delta_u)
                    rho_i = int(i / n_action)
                    # bootstrap
                    if new_i <= n_cell * n_action:
                        if v_it <= bootstrap:
                            value = delta_T * (0.5 * speed ** 2 + rho[rho_i, t] + 1) + V[(new_i, t + 1)] \
                                if (new_i, t + 1) in V else delta_T * (0.5 * speed ** 2 + rho[rho_i, t] + 1)
                        else:
                            value = delta_T * (0.5 * speed ** 2 + rho[rho_i, t] + 1) + critic(np.array([new_i, t + 1]))
                    else:
                        time = delta_u * delta_T * (n_cell * n_action - i) / speed
                        value = time * (0.5 * speed ** 2 + rho[rho_i, t] + 1)

                    pg_action.append(value)
                    if min_value > value:
                        min_value = value
                        V[(i, t)] = min_value

                PG[(i, t)] = pg_action

        # update critic network if not in bootstrap
        if v_it >= bootstrap - 1:
            for shuo in range(1000):
                truths = torch.tensor(list(V.values()), requires_grad=True)
                preds = torch.reshape(critic(np.array(list(V.keys()), dtype=float)), (1, len(V)))
                while float(torch.count_nonzero(preds)) == 0:  # to avoid zeros, else while -> if and break
                    critic = Critic(2)
                    critic_optimizer = torch.optim.Adam(critic.parameters(), lr=1e-3)
                    preds = torch.reshape(critic(np.array(list(V.keys()), dtype=float)), (1, len(V)))

                critic_loss = (truths - preds).abs().mean()
                critic_optimizer.zero_grad()
                critic_loss.backward()
                critic_optimizer.step()

        # update actor network
            for liu in range(500):
                truths = torch.tensor(list(PG.values()), requires_grad=True)
                preds = actor(np.array(list(PG.keys()), dtype=float))
                actor_loss = (truths - preds).abs().mean()
                # print(torch.max((truths - preds)))  # important metric
                actor_optimizer.zero_grad()
                actor_loss.backward()
                actor_optimizer.step()

    # return value for checking
    for i in range(n_cell):
        for t in range(T):
            pg = PG[(i * n_action, t)]
            pg_action = actor(np.array([i * n_action, t])).tolist()
            u_new[i, t] = u_action[pg.index(min(pg))]  # this is the u_new generated by accurate gradient
            u_new[i, t] = u_action[pg_action.index(min(pg_action))]
            V_new[i, t] = critic(np.array([i * n_action, t]))

    return u_new, V_new
